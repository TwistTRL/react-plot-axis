{"version":3,"sources":["lib/DateXAxis.js","lib/DateVerticalLineGrid.js","lib/YAxis.js","lib/YAxisSlabGrid.js","index.js"],"names":["DateXAxis","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ref","React","createRef","_this$props","width","height","react_default","a","createElement","style","display","draw","_this$props2","minX","maxX","tickPosition","draw_memo","validFromDiff","validToDiff","rangeMinX","rangeMaxX","memo","diffX","_generateDateGrids","generateDateGrids","grids","gridLabels","getGridLabels","startIndex","Math","max","bisect_right","endIndex","min","length","bisect_left","domXs","slice","map","x","toDomXCoord_Linear","ctx","current","getContext","clearRect","textPlot","ticPlot","labels","t","Date","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","grid","value","setTime","push","getMeaningfulDateField","err","return","d","getMilliseconds","getSeconds","getMinutes","getHours","getDate","getMonth","format","texts","textAlign","textBaseline","i","text","round","y","fillText","beginPath","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","moveTo","lineTo","stroke","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","PureComponent","DateVerticalLineGrid","majorGrids","minorGrids","generateMinorGrids","majorGridStartIndex","majorGridEndIndex","majorGridDomXs","minorGridStartIndex","minorGridEndIndex","minorGridDomXs","globalAlpha","verticalLinePlot","prevGrid","YAxis","minY","maxY","rangeMinY","rangeMaxY","diffY","_generateGrids","generateGrids","domYs","toDomYCoord_Linear","Number","parseFloat","toFixed","YAxisSlabGrid","drawSlab","fillStyle","fillRect","prevY","currentY","rectHeight","DateXAxisBundle","state","_this2","_this$state","react","type","step","onChange","ev","setState","parseInt","target","lib_DateXAxis","Component","DateVerticalLineGridBundle","_this3","_this4","_this$state2","flexDirection","lib_DateVerticalLineGrid","YAxisBundle","_this5","_this6","_this$state3","lib_YAxis","YAxisSlabGridBundle","_this7","_this8","_this$state4","lib_YAxisSlabGrid","ReactDOM","render","react_router_dom","className","to","react_router","path","exact","component","document","getElementById"],"mappings":"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","file":"static/js/main.d19bd926.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {bisect_left, bisect_right} from \"bisect\";\nimport {toDomXCoord_Linear,generateDateGrids} from \"plot-utils\";\nimport {format} from \"date-fns\";\n\nclass DateXAxis extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let { width,height} = this.props;\n    return (\n      <canvas ref={this.ref}  width={width} height={height}\n                              style={{width:width,height:height,display:\"block\"}}\n                              >\n      </canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minX,maxX,\n          width,height,\n          tickPosition} = this.props;\n    this.draw_memo = this.draw_memo || {validFromDiff:0,validToDiff:-1,rangeMinX:0,rangeMaxX:-1};\n    let memo = this.draw_memo;\n    let diffX = maxX-minX;\n    // Generate grids, labels and bitmaps in cache\n    if (memo.validFromDiff>diffX ||\n        diffX>memo.validToDiff ||\n        memo.rangeMinX>minX ||\n        maxX>memo.rangeMaxX\n        ) {\n      memo.rangeMinX = minX-10*diffX;\n      memo.rangeMaxX = maxX+10*diffX;\n      let {grids, validFromDiff, validToDiff} = generateDateGrids(minX,maxX,memo.rangeMinX,memo.rangeMaxX);\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.grids = grids;\n      memo.gridLabels = this.getGridLabels(grids);\n    }\n    // Filter\n    let startIndex = Math.max(0,bisect_right(memo.grids,minX));\n    let endIndex = Math.min(memo.grids.length-1,bisect_left(memo.grids,maxX));\n    \n    let domXs = memo.grids.slice(startIndex,endIndex+1).map( (x)=>toDomXCoord_Linear(width,minX,maxX,x));\n    let gridLabels = memo.gridLabels.slice(startIndex,endIndex+1);\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    this.textPlot(ctx,width,height,domXs,gridLabels);\n    this.ticPlot(ctx,width,height,domXs,tickPosition);\n  }\n  \n  getGridLabels(grids){\n    let labels = [];\n    let t = new Date();\n    for (let grid of grids) {\n      t.setTime(grid);\n      labels.push(this.getMeaningfulDateField(t));\n    }\n    return labels;\n  }\n  \n  getMeaningfulDateField(d){\n    if (d.getMilliseconds()===0) {\n      if (d.getSeconds()===0) {\n        if (d.getMinutes()===0){\n          if (d.getHours()===0){\n            if (d.getDate()===1) {\n              if (d.getMonth()===0) {\n                return format(d,\"YYYY\");\n              }\n              return format(d,\"MMM\");\n            }\n            return format(d,\"Do\");\n          }\n          return format(d,\"HH:00\");\n        }\n        return format(d,\"HH:mm\");\n      }\n      return format(d,\"HH:mm:ss\");\n    }\n    return format(d,\"ss.SSS\");\n  }\n\n  textPlot(ctx,width,height,domXs,texts){\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    for (let i=0; i<domXs.length; i++) {\n      let text = texts[i];\n      let x = Math.round(domXs[i]);\n      let y = Math.round(height/2);\n      ctx.fillText(text,x,y);\n    }\n  }\n  \n  ticPlot(ctx,width,height,domXs,tickPosition){\n    switch (tickPosition) {\n      case \"top\":\n      default:\n        ctx.beginPath();\n        for (let x of domXs){\n          ctx.moveTo(Math.round(x)+0.5,0);\n          ctx.lineTo(Math.round(x)+0.5,10);\n        }\n        ctx.moveTo(0,0.5);\n        ctx.lineTo(width,0.5);\n        ctx.stroke();\n        break;\n      case \"bottom\":\n        ctx.beginPath();\n        for (let x of domXs){\n          ctx.moveTo(Math.round(x)+0.5,height-10);\n          ctx.lineTo(Math.round(x)+0.5,height);\n        }\n        ctx.moveTo(0,height-0.5);\n        ctx.lineTo(width,height-0.5);\n        ctx.stroke();\n        break;\n    }\n  }\n}\n\nDateXAxis.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  tickPosition: PropTypes.string.isRequired,\n}\n\nexport default DateXAxis;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {bisect_left,bisect_right} from \"bisect\";\nimport {toDomXCoord_Linear,generateDateGrids} from \"plot-utils\";\n\nclass DateVerticalLineGrid extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let { width,\n          height} = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={1} style={{display:\"block\",height:height,width:width}}></canvas>\n    );\n  }\n  \n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n  \n  draw() {\n    let {minX,maxX,width} = this.props;\n    let diffX = maxX-minX;\n    // Generate grid if needed\n    this.draw_memo = this.draw_memo || {validFromDiff:0, validToDiff: -1, rangeMinX:0, rangeMaxX: -1};\n    let memo = this.draw_memo;\n    if (memo.validFromDiff>diffX ||\n        diffX>memo.validToDiff ||\n        memo.rangeMinX>minX ||\n        maxX>memo.rangeMaxX\n        ) {\n      memo.rangeMinX = minX-10*diffX;\n      memo.rangeMaxX = maxX+10*diffX;\n      let {grids, validFromDiff, validToDiff} = generateDateGrids(minX,maxX,memo.rangeMinX,memo.rangeMaxX);\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.majorGrids = grids;\n      memo.minorGrids = this.generateMinorGrids(grids);\n    }\n    // Filter\n    let majorGridStartIndex = Math.max(0,bisect_left(memo.majorGrids,minX));\n    let majorGridEndIndex = Math.min(memo.majorGrids.length-1,bisect_right(memo.majorGrids,maxX));\n    let majorGridDomXs = memo.majorGrids.slice(majorGridStartIndex,majorGridEndIndex+1)\n                              .map( (x)=>toDomXCoord_Linear(width,minX,maxX,x));\n    let minorGridStartIndex = Math.max(0,bisect_right(memo.minorGrids,minX));\n    let minorGridEndIndex = Math.min(memo.minorGrids.length-1,bisect_left(memo.minorGrids,maxX));\n    let minorGridDomXs = memo.minorGrids.slice(minorGridStartIndex,minorGridEndIndex+1)\n                                        .map( (x)=>toDomXCoord_Linear(width,minX,maxX,x));\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,1);\n    ctx.globalAlpha = 0.3;\n    this.verticalLinePlot(ctx,width,1,majorGridDomXs);\n    ctx.globalAlpha = 0.15;\n    this.verticalLinePlot(ctx,width,1,minorGridDomXs);\n  }\n  \n  verticalLinePlot(ctx,width,height,domXs){\n    let x = null;\n    ctx.beginPath();\n    for (let i=0; i<domXs.length; i++) {\n      x = Math.round(domXs[i]);\n      ctx.moveTo(0.5+x,0);\n      ctx.lineTo(0.5+x,height);\n    }\n    ctx.stroke();\n  }\n  \n  generateMinorGrids(grids) {\n    if (grids.length===0) {\n      return [];\n    }\n    let minorGrids = [];\n    let prevGrid = grids[0];\n    for (let grid of grids){\n      minorGrids.push((grid+prevGrid)/2);\n      prevGrid = grid;\n    }\n    return minorGrids;\n  }\n}\n\nDateVerticalLineGrid.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n}\n\nexport default DateVerticalLineGrid;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\"; \nimport {bisect_left, bisect_right} from \"bisect\";\nimport {toDomYCoord_Linear, generateGrids} from \"plot-utils\";\n\nclass YAxis extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let {width,height} = this.props;\n    return (\n      <canvas ref={this.ref}  width={width} height={height}\n                              style={{width:width,height:height,display:\"block\"}}\n                              >\n      </canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minY,maxY,\n          width,height,\n          tickPosition} = this.props;\n    this.draw_memo = this.draw_memo || {validFromDiff:0,validToDiff:-1,rangeMinY:0,rangeMaxY:-1};\n    let memo = this.draw_memo;\n    let diffY = maxY-minY;\n    // Generate grids, labels and bitmaps in cache\n    if (memo.validFromDiff>diffY ||\n        diffY>memo.validToDiff ||\n        memo.rangeMinY>minY ||\n        maxY>memo.rangeMaxY\n        ) {\n      memo.rangeMinY = minY-10*diffY;\n      memo.rangeMaxY = maxY+10*diffY;\n      let {grids, validFromDiff, validToDiff} = generateGrids(minY,maxY,memo.rangeMinY,memo.rangeMaxY);\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.grids = grids;\n      memo.gridLabels = this.getGridLabels(grids);\n    }\n    // Filter\n    let startIndex = Math.max(0,bisect_right(memo.grids,minY));\n    let endIndex = Math.min(memo.grids.length-1,bisect_left(memo.grids,maxY));\n    \n    let domYs = memo.grids.slice(startIndex,endIndex+1).map( (y)=>toDomYCoord_Linear(height,minY,maxY,y));\n    let gridLabels = memo.gridLabels.slice(startIndex,endIndex+1);\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    this.textPlot(ctx,width,height,domYs,gridLabels);\n    this.ticPlot(ctx,width,height,domYs,tickPosition);\n  }\n  \n  getGridLabels(grids){\n    return grids.map((grid)=>{\n      if (grid>10 || grid<-10) {\n        return Math.round(grid);\n      }\n      else {\n        return Number.parseFloat(grid).toFixed(2)\n      }\n    });\n  }\n\n  textPlot(ctx,width,height,domYs,texts){\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    for (let i=0; i<domYs.length; i++) {\n      let text = texts[i];\n      let x = Math.round(width/2);\n      let y = Math.round(domYs[i]);\n      ctx.fillText(text,x,y);\n    }\n  }\n  \n  ticPlot(ctx,width,height,domYs,tickPosition){\n    let x;\n    switch (tickPosition) {\n      case \"left\":\n      default:\n        ctx.beginPath();\n        x = 5;\n        for (let y of domYs){\n          ctx.moveTo(0, Math.round(y));\n          ctx.lineTo(x, Math.round(y));\n        }\n        ctx.moveTo(0,0);\n        ctx.lineTo(0,height);\n        ctx.stroke();\n        break;\n      case \"right\":\n        ctx.beginPath();\n        x = width-5;\n        for (let y of domYs){\n          ctx.moveTo(x, Math.round(y));\n          ctx.lineTo(width, Math.round(y));\n        }\n        ctx.moveTo(width,0);\n        ctx.lineTo(width,height);\n        ctx.stroke();\n        break;\n    }\n  }\n}\n\nYAxis.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  tickPosition: PropTypes.string.isRequired,\n}\n\nexport default YAxis;\n\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {bisect_left, bisect_right} from \"bisect\";\nimport {toDomYCoord_Linear, generateGrids} from \"plot-utils\";\n\nclass YAxisSlabGrid extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref= React.createRef();\n  }\n  \n  render() {\n    let {width,height} = this.props;\n    return (\n      <canvas ref={this.ref}  width={1} height={height}\n                              style={{width:width,height:height,display:\"block\"}}\n                              >\n      </canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n  \n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    let { minY,maxY,\n          width,height,\n          tickPosition} = this.props;\n    this.draw_memo = this.draw_memo || {validFromDiff:0,validToDiff:-1,rangeMinY:0,rangeMaxY:-1};\n    let memo = this.draw_memo;\n    let diffY = maxY-minY;\n    // Generate grids, labels and bitmaps in cache\n    if (memo.validFromDiff>diffY ||\n        diffY>memo.validToDiff ||\n        memo.rangeMinY>minY ||\n        maxY>memo.rangeMaxY\n        ) {\n      memo.rangeMinY = minY-10*diffY;\n      memo.rangeMaxY = maxY+10*diffY;\n      let {grids, validFromDiff, validToDiff} = generateGrids(minY,maxY,memo.rangeMinY,memo.rangeMaxY);\n      memo.validFromDiff = validFromDiff;\n      memo.validToDiff = validToDiff;\n      memo.grids = grids;\n    }\n    // Filter\n    let startIndex = Math.max(0,bisect_left(memo.grids,minY));\n    let endIndex = Math.min(memo.grids.length-1,bisect_right(memo.grids,maxY));\n    \n    let domYs = memo.grids.slice(startIndex,endIndex+1).map( (y)=>toDomYCoord_Linear(height,minY,maxY,y));\n    // Plot\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,1,height);\n    this.drawSlab(ctx,1,height,domYs);\n  }\n  \n  drawSlab(ctx,width,height,domYs){\n    ctx.fillStyle=\"#fffef9\";\n    ctx.fillRect(0,0,width,height);\n    if (domYs.length===0) {\n      return;\n    }\n    ctx.fillStyle=\"#fff7e4\";\n    let prevY = domYs[0];\n    for (let i=1; i<domYs.length; i++) {\n      let currentY = Math.round(domYs[i]);\n      let rectHeight = Math.round((prevY+currentY)/2)-prevY;\n      ctx.fillRect(0,prevY,1,rectHeight);\n      prevY = currentY;\n    }\n  }\n}\n\nYAxisSlabGrid.propTypes = {\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n}\n\nexport default YAxisSlabGrid;\n\n\n","import React, {Component, Fragment} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {DateXAxis,DateVerticalLineGrid,YAxis,YAxisSlabGrid} from \"./lib\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\n\n// CSS\nimport \"./index.css\";\n\nclass DateXAxisBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {width: 1000,\n                  height: 50,\n                  minX: 0,\n                  maxX: 100000000000,\n                  tickPosition: \"top\"\n                  };\n  }\n\n  render() {\n    let {width,height,minX,maxX,tickPosition} = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input  type=\"range\" min={800} max={1600} step={1}\n                  value={width}\n                  onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          height:\n          <input  type=\"range\" min={50} max={100} step={1}\n                  value={height}\n                  onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          minX:\n          <input  type=\"range\" min={-100000000000} max={maxX} step={1}\n                  value={minX}\n                  onChange={(ev)=>this.setState({minX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          maxX:\n          <input  type=\"range\" min={minX} max={100000000000} step={1}\n                  value={maxX}\n                  onChange={(ev)=>this.setState({maxX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          tickPosition:\n          <select value={tickPosition}\n                  onChange={(ev)=>this.setState({tickPosition:ev.target.value})}>\n            <option value=\"top\">top</option>\n            <option value=\"bottom\">bottom</option>\n          </select>\n        </div>\n        <DateXAxis  width={width} height={height}\n                    minX={minX} maxX={maxX}\n                    tickPosition={tickPosition}\n                    />\n      </Fragment>\n    );\n  }\n}\n\nclass DateVerticalLineGridBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {width: 1000,\n                  height: 50,\n                  minX: 0,\n                  maxX: 100000000000,\n                  tickPosition: \"top\"\n                  };\n  }\n\n  render() {\n    let {width,height,minX,maxX,tickPosition} = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input  type=\"range\" min={800} max={1600} step={1}\n                  value={width}\n                  onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          height:\n          <input  type=\"range\" min={100} max={500} step={1}\n                  value={height}\n                  onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          minX:\n          <input  type=\"range\" min={-100000000000} max={maxX} step={1}\n                  value={minX}\n                  onChange={(ev)=>this.setState({minX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          maxX:\n          <input  type=\"range\" min={minX} max={100000000000} step={1}\n                  value={maxX}\n                  onChange={(ev)=>this.setState({maxX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div style={{display:\"flex\",flexDirection:\"column\"}}>\n          <DateVerticalLineGrid width={width} height={height}\n                                minX={minX} maxX={maxX}\n                                />\n          <DateXAxis  width={width} height={50}\n                      minX={minX} maxX={maxX}\n                      tickPosition=\"top\"\n                      />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nclass YAxisBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {width: 50,\n                  height: 400,\n                  minY: 0,\n                  maxY: 10000,\n                  tickPosition: \"left\"\n                  };\n  }\n\n  render() {\n    let {width,height,minY,maxY,tickPosition} = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input  type=\"range\" min={50} max={100} step={1}\n                  value={width}\n                  onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          height:\n          <input  type=\"range\" min={200} max={800} step={1}\n                  value={height}\n                  onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          minY:\n          <input  type=\"range\" min={-10000} max={maxY} step={1}\n                  value={minY}\n                  onChange={(ev)=>this.setState({minY:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          maxY:\n          <input  type=\"range\" min={minY} max={10000} step={1}\n                  value={maxY}\n                  onChange={(ev)=>this.setState({maxY:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          tickPosition:\n          <select value={tickPosition}\n                  onChange={(ev)=>this.setState({tickPosition:ev.target.value})}>\n            <option value=\"left\">left</option>\n            <option value=\"right\">right</option>\n          </select>\n        </div>\n        <YAxis  width={50} height={height}\n                minY={minY} maxY={maxY}\n                tickPosition=\"left\"\n                />\n      </Fragment>\n    );\n  }\n}\n\nclass YAxisSlabGridBundle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {width: 800,\n                  height: 400,\n                  minY: 0,\n                  maxY: 10000,\n                  };\n  }\n\n  render() {\n    let {width,height,minY,maxY,tickPosition} = this.state;\n    return (\n      <Fragment>\n        <div>\n          width:\n          <input  type=\"range\" min={400} max={1200} step={1}\n                  value={width}\n                  onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          height:\n          <input  type=\"range\" min={200} max={800} step={1}\n                  value={height}\n                  onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          minY:\n          <input  type=\"range\" min={-10000} max={maxY} step={1}\n                  value={minY}\n                  onChange={(ev)=>this.setState({minY:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          maxY:\n          <input  type=\"range\" min={minY} max={10000} step={1}\n                  value={maxY}\n                  onChange={(ev)=>this.setState({maxY:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div style={{display:\"flex\"}}>\n          <YAxis  width={50} height={height}\n                  minY={minY} maxY={maxY}\n                  tickPosition=\"right\"\n                  />\n          <YAxisSlabGrid  width={width} height={height}\n                          minY={minY} maxY={maxY}\n                          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst App = (props)=>{\n  return (\n    <Router>\n      <nav className=\"app\">\n        <Link to=\"/DateXAxis\">DateXAxis</Link>\n        <Link to=\"/DateVerticalLineGrid\">DateVerticalLineGrid</Link>\n        <Link to=\"/YAxis\">YAxisBundle</Link>\n        <Link to=\"/YAxisSlabGrid\">YAxisSlabGridBundle</Link>\n      </nav>\n      <Route path=\"/DateXAxis\" exact component={DateXAxisBundle}/>\n      <Route path=\"/DateVerticalLineGrid\" exact component={DateVerticalLineGridBundle}/>\n      <Route path=\"/YAxis\" exact component={YAxisBundle}/>\n      <Route path=\"/YAxisSlabGrid\" exact component={YAxisSlabGridBundle}/>\n    </Router>\n  );\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}